{"version":3,"file":"static/js/134.01adc0bd.chunk.js","mappings":"wNAgHA,UA5Ge,WAAO,IAADA,EACnBC,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAAsCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAA4BT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAb,EAAAA,EAAAA,GAAAW,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,EAAqC,QAA9BpB,EAAGkB,EAAaG,IAAI,kBAAU,IAAArB,EAAAA,EAAI,GAC1B,SAENsB,EAAmBC,GAAA,OAAAC,EAAAC,MAAC,KAADC,UAAA,UAAAF,IAejC,OAfiCA,GAAAG,EAAAA,EAAAA,GAAAC,IAAAA,MAAlC,SAAAC,EAAmCC,GAAK,IAAAC,EAAAC,EAAA,OAAAJ,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEbC,MAAM,mDAADC,OACyBP,EAAK,6DACxD,KAAD,EAFa,OAARC,EAAQE,EAAAK,KAAAL,EAAAE,KAAA,EAGUJ,EAASQ,OAAO,KAAD,EAChB,OADjBP,EAASC,EAAAK,KACfE,QAAQC,IAAIT,GAAWC,EAAAS,OAAA,SAChBV,GAAS,QAAAC,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAEhBO,QAAQC,IAAI,sBAADJ,OAAuBJ,EAAAU,GAAMC,UACxCC,EAAAA,GAAAA,MAAY,sBAADR,OAAuBJ,EAAAU,GAAMC,SAAW,CACjDE,SAAU,YACVC,MAAO,YACN,yBAAAd,EAAAe,OAAA,GAAAnB,EAAA,oBAENJ,MAAA,KAAAC,UAAA,CAjBDc,QAAQC,IAAIrB,IAmBZ6B,EAAAA,EAAAA,YAAU,WAIiB,SAAAC,IAWxB,OAXwBA,GAAAvB,EAAAA,EAAAA,GAAAC,IAAAA,MAAzB,SAAAuB,IAAA,IAAAC,EAAAC,EAAA,OAAAzB,IAAAA,MAAA,SAAA0B,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,cAAAmB,EAAAnB,KAAA,EACyBb,EAAoBb,GAAa,KAAD,EAAjD2C,EAAQE,EAAAhB,KACRe,EAAQD,EAASG,QACvBzC,EACEuC,GACEA,EAAMG,KAAI,SAAAC,GAAI,MAAK,CACjBC,GAAID,EAAS,GACbE,MAAOF,EAAY,MACnBG,KAAMH,EAAmB,aAAEI,UAAU,EAAG,GACzC,KACH,wBAAAP,EAAAN,OAAA,GAAAG,EAAA,MACH1B,MAAA,KAAAC,UAAA,CAdIjB,GAEJ,WACwByC,EAAAzB,MAAC,KAADC,UAAA,CAYzBoC,EACF,GAAG,CAACrD,IAwBJ,OACEsD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJD,EAAAA,EAAAA,MAAA,QAAMG,SAzBW,SAAAC,GAGnB,GAFAA,EAAEC,iBAEyB,KAAvB/D,EAAYgE,OAEd,OADAlD,EAAgB,CAAC,GACV0B,EAAAA,GAAAA,KAAW,8BAA+B,CAC/CC,SAAU,YACVC,MAAO,YAIXrC,EAAeL,EAAYgE,QAC3B/D,EAAe,GACjB,EAYiC0D,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEK,KAAK,OACLC,KAAK,cACLC,MAAOnE,EACPoE,SAfkB,SAAAN,GACxB,IAAMO,EAAQP,EAAEQ,OAAOH,MACjBI,EAAmB,KAAVF,EAAe,CAAE5C,MAAO4C,EAAML,QAAW,CAAC,EACzD/D,EAAeoE,EAAMG,eACrB1D,EAAgByD,EAClB,EAWQE,aAAa,MAEbC,YAAY,mBAEdd,EAAAA,EAAAA,KAAA,UAAQK,KAAK,SAAQN,SAAC,eAExBC,EAAAA,EAAAA,KAAA,MAAAD,SAGInD,EAAO2C,KAAI,SAAAwB,GAAK,OACdf,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACC,GAAE,WAAA7C,OAAa2C,EAAMtB,IAAKM,SAAA,GAAA3B,OAAK2C,EAAMrB,MAAK,MAAAtB,OAC9C2C,EAAMpB,KAAOoB,EAAMpB,KAAO,OAAM,QAF3BoB,EAAMtB,GAIV,QAgBjB,C","sources":["pages/Movies.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst Movies = () => {\n  const [searchInput, setSearchInput] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const movieId = searchParams.get('movieId') ?? '';\n  console.log(movieId);\n\n  async function fetchMovieByKeyword(query) {\n    try {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/search/movie?query=${query}&language=en-US&api_key=77971c184b7d14036ed9c9196e488377`\n      );\n      const movieList = await response.json();\n      console.log(movieList);\n      return movieList;\n    } catch (error) {\n      console.log(`An error occurred: ${error.message}`);\n      toast.error(`An error occurred: ${error.message}`, {\n        position: 'top-right',\n        theme: 'colored',\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function fetchMovie() {\n      const filmList = await fetchMovieByKeyword(searchQuery);\n      const films = filmList.results;\n      setMovies(\n        films &&\n          films.map(film => ({\n            id: film['id'],\n            title: film['title'],\n            year: film['release_date'].substring(0, 4),\n          }))\n      );\n    }\n    fetchMovie();\n  }, [searchQuery]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (searchInput.trim() === '') {\n      setSearchParams({});\n      return toast.warn('Please enter a search query', {\n        position: 'top-right',\n        theme: 'colored',\n      });\n    }\n\n    setSearchQuery(searchInput.trim());\n    setSearchInput('');\n  };\n\n  const handleInputChange = e => {\n    const input = e.target.value;\n    const params = input !== '' ? { query: input.trim() } : {};\n    setSearchInput(input.toLowerCase());\n    setSearchParams(params);\n  };\n\n  return (\n    <div>\n      <h1>pls hide me</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchInput\"\n          value={searchInput}\n          onChange={handleInputChange}\n          autoComplete=\"off\"\n          // autoFocus\n          placeholder=\"Search movies\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {\n          // searchQuery && movies.length > 0 ? (\n          movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`}>{`${movie.title} (${\n                movie.year ? movie.year : 'YYYY'\n              })`}</Link>\n            </li>\n          ))\n          // ) : (\n          //   <p>No movie were found for your query, please try another one!</p>\n          // )\n          /* toast.warn(\n              'No movie were found for your query, please try another one!',\n              {\n                position: 'top-right',\n                theme: 'colored',\n              }\n          ) */\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["_searchParams$get","_useState","useState","_useState2","_slicedToArray","searchInput","setSearchInput","_useState3","_useState4","searchQuery","setSearchQuery","_useState5","_useState6","movies","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","movieId","get","fetchMovieByKeyword","_x","_fetchMovieByKeyword","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee2","query","response","movieList","_context2","prev","next","fetch","concat","sent","json","console","log","abrupt","t0","message","toast","position","theme","stop","useEffect","_fetchMovie","_callee","filmList","films","_context","results","map","film","id","title","year","substring","fetchMovie","_jsxs","children","_jsx","onSubmit","e","preventDefault","trim","type","name","value","onChange","input","target","params","toLowerCase","autoComplete","placeholder","movie","Link","to"],"sourceRoot":""}